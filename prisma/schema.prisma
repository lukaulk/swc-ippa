generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model login {
  id_login  Int         @id @default(autoincrement())
  usuario   String      @db.VarChar(200)
  senha     String      @db.VarChar(200)
  categoria String      @db.VarChar(200)
  email     String      @unique @db.VarChar(200)
  aluno     aluno[]
  curso     curso[]
  professor professor[]
  team      team[]
  tfc       tfc[]
}

model aluno {
  id         Int    @id @default(autoincrement())
  nome       String @db.VarChar(200)
  curso_id   Int
  telefone   Int
  bi         String @db.VarChar(200)
  usuario_id Int
  curso      curso  @relation(fields: [curso_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "aluno_ibfk_1")
  login      login  @relation(fields: [usuario_id], references: [id_login], onDelete: Cascade, onUpdate: Restrict, map: "aluno_ibfk_2")

  commits commits []

  @@index([curso_id], map: "curso_id")
  @@index([usuario_id], map: "aluno_ibfk_2")
}

model banca {
  id          Int       @id @default(autoincrement())
  data        DateTime? @db.Date
  hora_inicio String?   @db.VarChar(10)
  hora_fim    String?   @db.VarChar(10)
  local       String?   @db.VarChar(200)
  presidente  Int
  vogal1      Int
  vogal2      Int
  tfc_id      Int
  usuario_id  Int

  @@index([tfc_id], map: "tfc_id")
  @@index([usuario_id], map: "usuario_id")
  @@index([presidente], map: "banca_ibfk_3")
  @@index([vogal1], map: "banca_ibfk_4")
  @@index([vogal2], map: "banca_ibfk_5")
}

model curso {
  id         Int     @id @default(autoincrement())
  nome       String? @db.VarChar(200)
  descricao  String? @db.VarChar(500)
  usuario_id Int?
  aluno      aluno[]
  login      login?  @relation(fields: [usuario_id], references: [id_login], onDelete: Cascade, onUpdate: Restrict, map: "curso_ibfk_1")

  @@index([usuario_id], map: "usuario_id")
}

model professor {
  id         Int     @id @default(autoincrement())
  nome       String? @db.VarChar(200)
  descricao  String? @db.VarChar(200)
  usuario_id Int?
  login      login?  @relation(fields: [usuario_id], references: [id_login], onDelete: Cascade, onUpdate: Restrict, map: "professor_ibfk_1")

  @@index([usuario_id], map: "usuario_id")
}

model commits {
  id Int @id @default(autoincrement())
  mensagem String @db.VarChar(200)
  timestamp String @db.VarChar(10)
  aluno_id Int
  estadoTFC estadoTFC[]

  aluno  aluno? @relation(fields: [aluno_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model estadoTFC {
  id Int @id @default(autoincrement())
  finalizado Boolean @default(false)
  aprovado Boolean @default(false)
  commits_id Int
  tfc_id Int 

  commits commits @relation(fields: [commits_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  tfc tfc @relation(fields: [tfc_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "estado_tfc_ibfk_1")
}

model tfc {
  id            Int       @id @default(autoincrement())
  titulo        String?   @db.VarChar(200)
  data_entrega  DateTime? @db.Date
  arquivo       String?   @db.VarChar(200)
  observacoes   String    @db.VarChar(200)
  aluno_id      String    @db.VarChar(300)
  orientador_id String    @db.VarChar(300)
  usuario_id    Int
  login         login     @relation(fields: [usuario_id], references: [id_login], onDelete: Cascade, onUpdate: Restrict, map: "tfc_ibfk_3")
  estado estadoTFC[]
  @@index([aluno_id], map: "aluno_id")
  @@index([orientador_id], map: "orientador_id")
  @@index([usuario_id], map: "tfc_ibfk_3")
}

model team {
  id         Int    @id @default(autoincrement())
  usuario    String @unique(map: "usuario") @db.VarChar(200)
  senha      String @db.VarChar(200)
  categoria  String @db.VarChar(200)
  usuario_id Int
  login      login  @relation(fields: [usuario_id], references: [id_login], onDelete: Cascade, onUpdate: Restrict, map: "team_ibfk_1")

  @@index([usuario_id], map: "usuario_id")
}
